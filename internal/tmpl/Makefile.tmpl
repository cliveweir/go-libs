COMPONENT = '{{.Name}}'
TAG := $(or ${TAG},${TAG},latest)
GO_BINARIES := $(HOME)/go
ifdef GOPATH
	GO_BINARIES = $(GOPATH)/bin
endif
COMMIT=$(shell git describe --always)
now=$(shell date +'%Y-%m-%d_%T')

all: check test build

dep:
	@go mod download

check: lint vet format sec
format: tools
	@echo "$(OK_COLOR)==> Checking code formating with 'goimports' tool$(NO_COLOR)"
	@goimports -l -w . || exit 1

vet:
	@echo "$(OK_COLOR)==> Checking code correctness with 'go vet' tool$(NO_COLOR)"
	@go vet ./... || exit 1

lint: tools
	@echo "$(OK_COLOR)==> Checking code style with 'golint' tool$(NO_COLOR)"
	@golint -set_exit_status ./... || exit 1

PHONY+= sec
sec: $(GOPATH)/bin/gosec
	@echo "ðŸ”˜ Checking for security problems ... (`date '+%H:%M:%S'`)"
	@sec=`gosec -quiet ./...`; \
	if [ "$$sec" != "" ]; \
	then echo "ðŸ”´ Problems found"; echo "$$sec"; exit 1;\
	else echo "âœ… No problems found (`date '+%H:%M:%S'`)"; \
	fi

test:
	@echo "$(OK_COLOR)==> Running tests$(NO_COLOR)"
ifndef CI
	@go test -v -race -cover ./... || exit 1
else
	@go test -v -race -cover ./... 2>&1 | go-junit-report > report.xml
endif

build:
	@echo "$(OK_COLOR)==> Building$(NO_COLOR)"
	@CGO_ENABLED=0 go build -ldflags "-X main.sha1ver=${COMMIT} -X main.buildTime=${now}" -a -installsuffix cgo cmd/{{.Name}}/main.go || exit 1

image:
	docker build ${DOCKER_BUILD_OPTS} --build-arg COMMIT=${COMMIT} -t {{.Name}}:${TAG} .

dev: tools
	@docker-compose -p {{.Name}} up

run:
	go run cmd/{{.Name}}/main.go || exit 1

run-hot: $(GO_BINARIES)/CompileDaemon
	CompileDaemon --build="go build -o {{.Name}} --race cmd/{{.Name}}/main.go" --command="./{{.Name}}" || exit 1


################################################################################
#  Tools and Deps                                                              #
#  The following targets install dependancies and tools required for the build #
################################################################################
tools: $(GO_BINARIES)/golint $(GO_BINARIES)/goimports $(GO_BINARIES)/CompileDaemon $(GOPATH)/bin/gosec
$(GO_BINARIES)/golint:
	@go get -u golang.org/x/lint/golint

$(GO_BINARIES)/goimports:
	@go get -u golang.org/x/tools/cmd/goimports

$(GO_BINARIES)/CompileDaemon:
	@go get github.com/githubnemo/CompileDaemon

$(GOPATH)/bin/gosec:
	@echo "ðŸ”˜ Installing gosec ... (`date '+%H:%M:%S'`)"
	@curl -sfL https://raw.githubusercontent.com/securego/gosec/master/install.sh | sh -s -- -b $(GOPATH)/bin

init-hooks: # Set hooks path for this repo
	git config core.hooksPath .hooks
